import java.time.Duration;
import java.time.LocalDateTime;

public class Pumps extends Sensors {

    private int water_pump1;
    private int water_pump2;
    private LocalDateTime startPump1Time;
    private LocalDateTime startPump2Time;
    private long pump1Duration; // Duração da última ativação em minutos
    private long pump2Duration; // Duração da última ativação em minutos
    private long pump1TotalDuration; // Duração total acumulada em minutos
    private long pump2TotalDuration; // Duração total acumulada em minutos

    public Pumps() {
        this.water_pump1 = getPump1();
        this.water_pump2 = getPump2();
        this.pump1Duration = 0;
        this.pump2Duration = 0;
        this.pump1TotalDuration = 0;
        this.pump2TotalDuration = 0;

        // Verifica o estado inicial das bombas para iniciar os cronômetros se necessário
        if (water_pump1 == 1) {
            startPump1Time = LocalDateTime.now();
        }

        if (water_pump2 == 1) {
            startPump2Time = LocalDateTime.now();
        }
    }

    public void startPumpsChrono() {
        // Atualiza o estado de `water_pump1` e controla o cronômetro
        int newPump1Status = getPump1();
        if (newPump1Status == 1 && water_pump1 == 0) {
            startPump1Time = LocalDateTime.now();
        } else if (newPump1Status == 0 && water_pump1 == 1 && startPump1Time != null) {
            LocalDateTime endPump1Time = LocalDateTime.now();
            Duration elapsedTime = Duration.between(startPump1Time, endPump1Time);
            pump1Duration = elapsedTime.toMinutes();
            pump1TotalDuration += pump1Duration; // Acumula a duração total
        }
        water_pump1 = newPump1Status;

        // Atualiza o estado de `water_pump2` e controla o cronômetro
        int newPump2Status = getPump2();
        if (newPump2Status == 1 && water_pump2 == 0) {
            startPump2Time = LocalDateTime.now();
        } else if (newPump2Status == 0 && water_pump2 == 1 && startPump2Time != null) {
            LocalDateTime endPump2Time = LocalDateTime.now();
            Duration elapsedTime = Duration.between(startPump2Time, endPump2Time);
            pump2Duration = elapsedTime.toMinutes();
            pump2TotalDuration += pump2Duration; // Acumula a duração total
        }
        water_pump2 = newPump2Status;
    }

    public long getPump1Duration() {
        return pump1Duration;
    }

    public long getPump2Duration() {
        return pump2Duration;
    }

    public long getPump1TotalDuration() {
        return pump1TotalDuration;
    }

    public long getPump2TotalDuration() {
        return pump2TotalDuration;
    }

    public static void main(String[] args) {
        Pumps pumps = new Pumps();

        // Chamando o método que encapsula toda a lógica
        pumps.startPumpsChrono();
        try {
            Thread.sleep(3 * 60 * 1000); // Simula 3 minutos de ativação
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        pumps.startPumpsChrono();

        System.out.println("Tempo de ativação da última execução da bomba 1 (em minutos): " + pumps.getPump1Duration());
        System.out.println("Tempo total acumulado da bomba 1 (em minutos): " + pumps.getPump1TotalDuration());
        System.out.println("Tempo de ativação da última execução da bomba 2 (em minutos): " + pumps.getPump2Duration());
        System.out.println("Tempo total acumulado da bomba 2 (em minutos): " + pumps.getPump2TotalDuration());
    }
}
